@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics;
@using System.Timers;
@inject NavigationManager NavManager
@implements IAsyncDisposable


<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>
<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;
    private int idCount = 0; // Who cares about security am I right? {BUG}
    private int obstCount;
    private int[] playerIds = new int[50];
    private Obst[] obst = new Obst[50];
    private List<string> tempMessages = new();
    private List<string> coordMessages = new();
    private PlayerList Players = new();

    private Stopwatch stopwatch;
    private int sendingTime = 50;

    private List<Pellet> pellets = new();
    Random rnd = new Random();

    public class Pellet
    {
        public int ID { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public int TYPE { get; set; }
    }

    private class Obst{

        public int x;
        public int y;
        public int width;
        public int height;

        public Obst(int x, int y, int w, int h)
        {
            this.x = x;
            this.y = y;
            this.width = w;
            this.height = h;
        }
    }

    private class PlayerList
    {
        public List<Player> playerList;

        public PlayerList()
        {
            playerList = new();
        }

        public void Add(Player p)
        {
            playerList.Add(p);
        }

        public void Remove(string p)
        {
            playerList = playerList.Where(player => player.id != p).ToList();

        }

        public Player getPlayer(string id)
        {
            foreach (Player p in playerList)
            {
                if (p.id == id)
                {
                    return p;
                }
            }
            return null; //Here's your "value is null" error
        }
    }

    private class Player
    {
        public int Left;
        public int Top;
        public int Hp;
        public string id;
        public string pClass;

        public Player(string id, int l, int t, string c)
        {
            this.id = id;
            Left = l;
            Top = t;
            pClass = c;
            switch (c)
            {
                case "tank":
                    Hp = 50;
                    break;
                case "scout":
                    Hp = 25;
                    break;
            }
        }

        public (int, int) getCoords()
        {
            return (Left, Top);
        }

        public void setCoords(int l, int t)
        {
            Left = l;
            Top = t;
        }
        public void takeDamage(int dam)
        {
            this.Hp -= dam;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        GenerateAndSendPellets(hubConnection);

        // Create Obst
        obst[0] = new Obst(100, 100, 400, 10);
        obst[1] = new Obst(200, 200, 10, 90);
        obst[2] = new Obst(500, 300, 10, 200);
        obst[3] = new Obst(100, 400, 100, 10);
        obst[4] = new Obst(200, 500, 10, 30);
        obstCount = 5;

        //HOLY MOLY USE IN ChatHub.cs, but still need to implement
        /*
        public Task SendMessageToCaller(string user, string message)
            {
            return Clients.Caller.SendAsync("ReceiveMessage", user, message);
         }
         */

        stopwatch = new Stopwatch();
        stopwatch.Start();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => 
        {
            //Now this stopwatch decides how frequently to send out stored player coordinates
            //This means it doesnt just respond to everyone every single time, which is catastrophic
            //It sends out coords every, say, 50ms
            if (stopwatch.ElapsedMilliseconds > sendingTime)
            {
                foreach (Player p in Players.playerList) {
                    (int, int) pos = p.getCoords();
                    hubConnection.SendAsync("SendMessage", "SERVER", "All|Coords|" + p.id.ToString() + "|" + pos.Item1.ToString() + "|" + pos.Item2.ToString());
                    //messages.Add(p.id.ToString());
                }
                stopwatch.Restart();
            }

            //SetupPelletGenerationTimer(hubConnection);

            var parsedMessage = message.Split('|');
            if (parsedMessage.Length > 0)
            {
                switch (parsedMessage[0])
                {
                    case "Request":
                        if (parsedMessage[1] == "CreateAvatar")
                        {
                            int gotId = int.Parse(user);
                            playerIds[idCount] = gotId;
                            Players.Add(new Player(user, 500, 500, parsedMessage[2]));
                            hubConnection.SendAsync("SendMessage", "SERVER", gotId.ToString() + "|RequestAccepted|" + parsedMessage[2]);
                            for (int i = 0; i < idCount; i++)
                            {
                                if (gotId != playerIds[i])
                                {
                                    hubConnection.SendAsync("SendMessage", "SERVER", gotId.ToString() + "|EnemyCreated|" + playerIds[i].ToString() + "|" + Players.getPlayer(playerIds[i].ToString()).pClass);
                                }
                            }
                            hubConnection.SendAsync("SendMessage", "SERVER", "All|EnemyCreated|" + gotId.ToString() + "|" + Players.getPlayer(gotId.ToString()).pClass);
                            idCount++;
                            for (int i = 0; i < obstCount; i++)
                            {
                                hubConnection.SendAsync("SendMessage", "SERVER", gotId.ToString() + "|Obstacles|" + obst[i].x + "|" + obst[i].y + "|" + obst[i].width + "|" + obst[i].height);
                            }
                            foreach (Pellet pellet in pellets)
                            {
                                hubConnection.SendAsync("SendMessage", "SERVER", gotId.ToString() + $"|PELLET|{pellet.ID}|{pellet.X}|{pellet.Y}|{pellet.TYPE}");
                            }
                        }
                        break;

                    case "Remove":
                        Players.Remove(parsedMessage[1]);
                        RemovePLayerId(parsedMessage[1]);
                        hubConnection.SendAsync("SendMessage", "SERVER", $"All|Remove|{parsedMessage[1]}");
                        break;

                    case "Coords": //Now saves location data into a custom PlayerList
                        Players.getPlayer(user).setCoords(int.Parse(parsedMessage[1]), int.Parse(parsedMessage[2]));
                        break;
                    case "BULLET":
                        hubConnection.SendAsync("SendMessage", "SERVER", $"All|BULLET|{parsedMessage[1]}|{parsedMessage[2]}|{parsedMessage[3]}|{parsedMessage[4]}|{parsedMessage[5]}|{parsedMessage[6]}|{parsedMessage[7]}");
                        break;
                    case "PELLET":
                        hubConnection.SendAsync("SendMessage", "SERVER", $"All|PELLET|{parsedMessage[1]}|{parsedMessage[2]}");
                        break;
                    case "Chat":
                        hubConnection.SendAsync("SendMessage", "SERVER", $"All|Chat|{parsedMessage[1]}");
                        break;
                }
            }
            //Uncomment to see all messages
            //var formattedMessage = $"{user}: {message}";
            //messages.Add(formattedMessage);

            //Updates browser view, left it on for debugging
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private void RemovePLayerId(string id)
    {
        for (int i = 0; i < idCount; i++)
        {
            if (playerIds[i] != null)
            {
                if (playerIds[i].ToString() == id)
                {
                    for (int j = i; j < idCount; j++)
                    {
                        playerIds[j] = playerIds[j + 1];
                    }
                }

            }

        }
        if (this.idCount > 0)
        {
            this.idCount--;
            
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    

    public void GenerateAndSendPellets(HubConnection hubConnection)
    {
        messages.Add("Pellet count: " + pellets.Count.ToString());
        if (pellets.Count >= 30)
        {
            return;
        }

        /*
        foreach (var pellet in pellets)
        {
            hubConnection.SendAsync("SendMessage", "SERVER", $"All|PELLET|{pellet.ID}|{pellet.X}|{pellet.Y}|{pellet.TYPE}");
        }*/
       
        for (int i = 0; i < 30; i++)
        {
            int id = rnd.Next(int.MaxValue / 2, int.MaxValue);
            int x = rnd.Next(800);
            int y = rnd.Next(600);
            int type = rnd.Next(3);
       
         
            pellets.Add(new Pellet {ID = id, X = x, Y = y, TYPE = type});
            //hubConnection.SendAsync("SendMessage", "SERVER", $"All|PELLET|{id}|{x}|{y}|{type}");
        }
    }


    public void DestroyPellet(int pelletID)
    {
        pellets.RemoveAll(p => p.ID == pelletID);
        hubConnection.SendAsync("SendMessage", "SERVER", $"All|PELLETDESTROY|{pelletID}");
    }

    public void SetupPelletGenerationTimer(HubConnection hubConnection)
    {
        Timer timer = new Timer(10000); // Interval set to 10 seconds
        timer.Elapsed += (sender, e) => GenerateAndSendPellets(hubConnection);
        timer.Start();
    }

}
