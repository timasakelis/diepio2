@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics;
@inject NavigationManager NavManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>
<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;
    private int idCount = 0; // Who cares about security am I right? {BUG}
    private int obstCount;
    private int[] playerIds = new int[50];
    private Obst[] obst = new Obst[50];
    private List<string> tempMessages = new();
    private List<string> coordMessages = new();
    private PlayerList Players = new();

    private Stopwatch stopwatch;
    private int sendingTime = 50;

    private class Obst{

        public int x;
        public int y;
        public int width;
        public int height;

        public Obst(int x, int y, int w, int h)
        {
            this.x = x;
            this.y = y;
            this.width = w;
            this.height = h;
        }
    }

    private class PlayerList
    {
        public List<Player> playerList;

        public PlayerList()
        {
            playerList = new();
        }

        public void Add(Player p)
        {
            playerList.Add(p);
        }

        public Player getPlayer(string id)
        {
            foreach (Player p in playerList)
            {
                if (p.id == id)
                {
                    return p;
                }
            }
            return null; //Here's your "value is null" error
        }
    }

    private class Player
    {
        public int Left;
        public int Top;
        public string id;

        public Player(string id, int l, int t)
        {
            this.id = id;
            Left = l;
            Top = t;
        }

        public (int, int) getCoords(int l, int t)
        {
            return (Left, Top);
        }

        public void setCoords(int l, int t)
        {
            Left = l;
            Top = t;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        // Create Obst
        obst[0] = new Obst(100, 100, 400, 10);
        obst[1] = new Obst(200, 200, 10, 90);
        obst[2] = new Obst(500, 300, 10, 200);
        obst[3] = new Obst(100, 400, 100, 10);
        obst[4] = new Obst(200, 500, 10, 30);
        obstCount = 5;

        //HOLY MOLY USE
        /*
        public Task SendMessageToCaller(string user, string message)
            {
            return Clients.Caller.SendAsync("ReceiveMessage", user, message);
         }
         */

        stopwatch = new Stopwatch();
        stopwatch.Start();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => 
        {

            var parsedMessage = message.Split('|');
            //tempMessages.Add(tempMessages.Count.ToString());

            if (stopwatch.ElapsedMilliseconds > sendingTime)
            {
                
                foreach (Player p in Players.playerList) {
                    //hubConnection.SendAsync("SendMessage", "SERVER_TEST", mess); //AND THIS IS WHERE YOU SHOULD SEND THE DUMBASS POSITION OUT
                }
                tempMessages.Clear();
                stopwatch.Restart();
            }


            if (parsedMessage.Length > 0)
            {
                switch (parsedMessage[0])
                {
                    case "Request":
                        if (parsedMessage[1] == "CreateAvatar")
                        {
                            int gotId = int.Parse(user);
                            playerIds[idCount] = gotId;
                            Players.Add(new Player(user, 0, 0));
                            hubConnection.SendAsync("SendMessage", "SERVER", gotId.ToString() + "|RequestAccepted");
                            for (int i = 0; i < idCount; i++)
                            {
                                hubConnection.SendAsync("SendMessage", "SERVER", gotId.ToString() + "|EnemyCreated|" + playerIds[i].ToString());
                            }
                            hubConnection.SendAsync("SendMessage", "SERVER", "All|EnemyCreated|" + gotId.ToString());
                            idCount++;
                            for (int i = 0; i < obstCount; i++)
                            {
                                hubConnection.SendAsync("SendMessage", "SERVER", gotId.ToString() + "|Obstacles|" + obst[i].x + "|" + obst[i].y + "|" + obst[i].width + "|" + obst[i].height);
                            }
                        }
                        break;
                    case "Coords": //write code to save, by replacing playerIds with Player class custom
                        //hubConnection.SendAsync("SendMessage", "SERVER", "All|Coords|" +user.ToString()+ "|" + parsedMessage[1].ToString() + "|"+parsedMessage[2].ToString());
                        //coordMessage = 
                        //tempMessages.Add("All|Coords|" + user.ToString() + "|" + parsedMessage[1].ToString() + "|" + parsedMessage[2].ToString());
                        Players.getPlayer(user).setCoords(int.Parse(parsedMessage[1]), int.Parse(parsedMessage[2])); //OK SO THIS IS WHERE WE MAKE THE PLAYER GET THE POSITION

                        break;
                    case "BULLET":
                        hubConnection.SendAsync("SendMessage", "SERVER", $"All|BULLET|{parsedMessage[1]}|{parsedMessage[2]}|{parsedMessage[3]}|{parsedMessage[4]}");
                        //tempMessages.Add($"All|BULLET|{parsedMessage[1]}|{parsedMessage[2]}|{parsedMessage[3]}|{parsedMessage[4]}");
                        break;
                }
            }


            var formattedMessage = $"{user}: {message}";
            //messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
